#!/usr/bin/env bash
set -eo pipefail

puts-step "Initializing .condarc"
touch /app/.heroku/miniconda/.condarc
if [[ -f .condarc ]]; then
  cp -f .condarc /app/.heroku/miniconda
fi

echo "nomkl" > $HOME/.heroku/miniconda/conda-meta/pinned
echo "python <3.8.0" >> $HOME/.heroku/miniconda/conda-meta/pinned
# Pin the conda version if proper version, not `latest` or anything else
if [[ $CONDA_VERSION =~ ^[0-9]+(\.[0-9]+)*$ ]]; then
    echo "conda ==${CONDA_VERSION}" >> $HOME/.heroku/miniconda/conda-meta/pinned
fi

conda config --set always_yes True
conda config --set auto_update_conda False
conda config --set show_channel_urls True
conda config --add create_default_packages nomkl
conda config --add create_default_packages pip

# this option is not available for conda versions below 4.7.11
conda config --set default_threads 3 2>/dev/null || true

# this option is buggy
conda config --set update_dependencies False 2>/dev/null || true

touch environment.yml
if [[ -f conda-requirements.txt ]]; then
  puts-step "Found conda-requirements.txt, injecting into environment.yml"
  while IFS= read -r line || [[ -n "$line" ]]; do
    yq w -i environment.yml dependencies[+] "$line" 
  done < conda-requirements.txt
fi

cat environment.yml
cat /app/.heroku/miniconda/.condarc

puts-step "Installing dependencies using Conda"
conda env -v create -f environment.yml | indent

if [[ -f requirements.txt ]]; then
  puts-step "Installing dependencies using Pip"
  pip install -r requirements.txt  --exists-action=w | indent
fi

puts-step "Cleaning the conda environment"
conda clean -pt --yes > /dev/null
